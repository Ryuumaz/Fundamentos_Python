1.  Considere strings, listas, tuplos e dicionários. Qual ou quais destas estruturas de dados são sequências
    (ie, cada objecto possui um número de ordem ou um índice)? 
    R: listas, tuplos e dicionários.

2. Quais os valores obtidos pelas expressões seguintes:
    2.1 (20, 10, 1, 30, 5).index(1) => 2
    2.2 'Alberto.Antunes.Almeida'.split('.') => ['Alberto', 'Antunes', 'Almeida']
    2.3 '//'.join(['abc', 'def', 'ghi']) => abc//def//ghi
    2.4 '+'.join('a_l_b_e_r_t_o'.split('_')) => a+l+b+e+r+t+o
    2.5 'abcdef'.upper() => ABCDEF
    2.6 'abc#def'.upper() => ABC#DEF
    2.7 '+'.join('a_l_b_e_r_t_o'.split('_')).upper() => 'A+L+B+E+R+T+O'
    2.8 'Fernando'.startswith('f') => fernando
    2.9 'ABC,DEF,GHI,'.split(',') => ['ABC', 'DEF', 'GHI', '']

3. Considerando que inicialmente vals = [12, 13, 14, 15, 16] , responda às seguintes questões.
    3.1 vals[2] = 14
    3.2 vals[2:] = [14, 15, 16]
    3.3 vals[-len(vals)] = 12
    3.4 vals[-len(vals) + 1] = 13
    3.5 vals[2:-1] = [14, 15]
    3.6 nums = vals[1:4]
        nums[1:3] = [4, 5]
        nums = [13, 4, 5] vals = [12, 13, 14, 15, 16]

4. Os seguintes programas ou fragmentos de programas apresentam alguns erros. Corrija-os:
    x = [10, 2, 3                           | x = [10, 2, 3]
    y = x{0}                                | y = x[0]

    x, y = 3, 5, 6                          | x, y = 3, 5
    print("X: ", X, "Y: ", Y)               | print("X: ", x, "Y: ", y)

    import pow from math                    | from math import pow
    input("Valor da base : ") = base        | base = float(input("Valor da base: "))
    input("Valor do expoente : ") = exp     | exp = float(input("Valor do expoente: "))
    _resultado = pow base, exp              | _resultado = pow(base, exp)
    print("Resultado":, _resultado)         | print("Resultado: ", _resultado)

6. Considere o seguinte fragmento de código que declara e atribui valores a duas variáveis do tipo int e float:
        x = 10.18
        y = 41
    Para cada instrução (str.) format / f-string na coluna da esquerda, preencha a grelha correspondente
    na coluna da direita. Uma quadrícula vazia entre caracteres indica a presença de um espaço. Assuma
    que todas as instruções estão envolvidas num print.
        f"{y}{x+10}"                    | '4120.18'
        
        f"{y:5}\n"                      | '   41'
        "{1:>6}{0:<6}".format(x, x+2)   | ' 12.1810.18 '

7. O que é exibido pelas seguinte instruções (se executadas através de um script):
    b. v1 = [0]*4                                               |
       i = 0                                                    |
       v1[i] = 7; i+=1; v1[i] = 14; v1[len(v1) - 1] = 15        | [7, 14, 0, 15]
       print(v1[i]*v1[i+1] + v1[1])                             | 14 * 0 + 14 = 0
    
    e. codigo = {'A': 19, 'B': 20}                              | 
       print(codigo['B'], codigo.get('C'), codigo.get('C', 21)) | 20, None, 21

    f. processos = {'ls': 192, 'grep': 321, 'init': 1}          | 
       print('ls' in processos, 321 in processos)               | True False    
       print((192 in processos)*2)                              | 0
       processos.update(ls=292, mkfs=19)                        | 
       print(list(processos.items()))                           | [('ls', 292), ('grep', 321), ('init', 1), ('mkfs', 19)]

    g. txt = ''                                                 |
       nums = [10, 11]                                          |
       if nums:                                                 |
            print("Um")                                         | Um       
       if not txt:                                              |            
            print("Dois")                                       | Dois
            txt = 'abc'                                         |        
            nums = []                                           |
       else:                                                    |
            print("Três")                                       |
            txt = 'xey'                                         |
            nums[-1:] = [12]                                    |
       txt = txt.replace('a', '').replace('e', '')              |
       print("Quatro" if len(nums) else "Cinco")                | Cinco
       print(txt if len(nums) == 0 else nums)                   | bc

9. Converta as seguintes decisões if-else/match-case em match-case/if-else:
    i = int(input("Valor de i: "))      | i = int(input("Valor de i: "))
                                        | match i
    if i == 10:                         |   case 10:
        print("Preparar operação")      |       print("Preparar operação")
    elif i == 5:                        |   case 5:    
        print("Começar operação")       |       print("Começar operação")
    elif i == 0:                        |   case 0:
        print("Missão crítica")         |       print("Missão crítica")
    else:                               |   case _:
        print("Operação abortada")      |       print("Operação abortada")

    nome = input("Nome? ")              | nome = input("Nome? ")
    match nome:                         | 
        case 'Alberto' | 'Armando':     | if nome == 'Alberto' || nome == 'Armando':
            print("Bom rapaz")          |    print("Bom rapaz")  
        case 'Arnaldo' | 'Augusto':     | elif nome == 'Arnaldo' || nome == 'Augusto':
            print("Gente estranha...")  |    print("Gente estranha...")
        case _:                         | else:
            print("Desconheço...")      |    print("Desconheço...")
